import org.apache.nifi.processor.io.StreamCallback
import groovy.json.JsonSlurper
import org.apache.commons.codec.binary.Base64
import java.nio.charset.StandardCharsets

def flowFile = session.get()
if (flowFile != null) {
    def jsonContent = new StringBuilder()
    def numeroPedido
    def notaFiscalXml

    // Read the content of the FlowFile and parse the JSON
    flowFile = session.write(flowFile, { inputStream, outputStream ->
        byte[] jsonBytes = inputStream.bytes
        jsonContent.append(new String(jsonBytes, StandardCharsets.UTF_8))
        outputStream.write(jsonBytes)
    } as StreamCallback)

    // Parse the JSON
    def parsedJson = new JsonSlurper().parseText(jsonContent.toString())
    if (parsedJson.Pedido != null && parsedJson.XMLBase64 != null) {
        numeroPedido = parsedJson.Pedido
        notaFiscalXml = new String(Base64.decodeBase64(parsedJson.XMLBase64), StandardCharsets.UTF_8)
		notaFiscalXml = notaFiscalXml.replaceAll(/<\?xml version="1\.0" encoding="[^"]*"\?>/, '<?xml version="1.0"?>')
        notaFiscalXml = notaFiscalXml.replaceAll("'", "''")
        // Create the SQL command
        def sqlCommand = "EXEC tt_extrair_xml_nfe N'${notaFiscalXml}', '${numeroPedido }'"

        // Add attributes to the FlowFile
        flowFile = session.putAttribute(flowFile, "numero_pedido", numeroPedido.toString())
        flowFile = session.putAttribute(flowFile, "nota_fiscal_xml", notaFiscalXml)
        flowFile = session.putAttribute(flowFile, "sql.command", sqlCommand)

        // Transfer the FlowFile to the success relationship
        session.transfer(flowFile, ExecuteScript.REL_SUCCESS)
    } else {
        // Log the error and transfer the FlowFile to the failure relationship
        log.error("Missing required JSON fields: NumeroPedido or NotaFiscalXML")
        session.transfer(flowFile, ExecuteScript.REL_FAILURE)
    }
}
